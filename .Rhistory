#and for each weight in weight.seq
mu <- link( m4.3, data=data.frame(weight=weight.seq))
str(mu)
#use type="n" to hide raw data
plot(height~ weight, d2, type="n")
#loop over samples and plot each mu value
for (i in 1:100)
points(weight.seq, mu[i,], pch=16, col=col.alpha(rangi2, 0.1))
#summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob=0.8)
#plot the raw data
# fading out points to make line and interval more visible
plot(height ~ weight, data=d2, col=col.alpha(rangi2, 0.5))
# plot the MAP line, aka the mean mu for each weight
lines(weight.seq, mu.mean)
#plot a shaded region for 89% HPDI
shade(mu.HPDI, weight.seq)
sim.height <- sim(m4.3, data=list(weight=weight.seq))
str(sim.height)
height.PI <- apply(sim.height, 2, PI, prob=0.90)
#plot raw data
plot(height ~ weight, d2, col=col.alpha(rangi2, 0.5))
#draw MAP line
lines(weight.seq, mu.mean)
#draw HPDI region for the line
shade(mu.HPDI, weight.seq)
#draw PI region for simulated heights
shade(height.PI, weight.seq)
library(rethinking)
data("WaffleDivorce")
d <- WaffleDivorce
#standardize the predictor
data("WaffleDivorce")
d <- WaffleDivorce
#standardize the predictor
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage-mean(d$MedianAgeMarriage)) / sd(d$MedianAgeMarriage)
#fit model
m5.1 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bA * MedianAgeMarriage.s,
a ~ dnorm(10,10),
bA ~ dnorm(0,1),
sigma ~ dunif(0,10)
), data = d)
MAM.seq <- seq(from=-3, to=3.5, length.out=30)
mu <- link(m5.1, data = data.frame(MedianAgeMarriage.s=MAM.seq))
mu.PI <- apply(mu, 2, PI)
#plot
plot(Divorce ~ MedianAgeMarriage.s, data=d, col=rangi2)
abline(m5.1)
shade(mu.PI, MAM.seq)
d$Marriage.s <- (d$Marriage - mean(d$Marriage))/sd(d$Marriage)
m5.2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10,10)
bR ~ dnorm(0,1),
d$Marriage.s <- (d$Marriage - mean(d$Marriage))/sd(d$Marriage)
m5.2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10,10),
bR ~ dnorm(0,1),
sigma ~ dunif(0,10)
), data = d
)
#plot
plot(Divorce ~ Marriage.sc, data=d, col=rangi2)
mu.PI <- apply(mu, 2, PI)
MAM.seq <- seq(from=-3, to=3.5, length.out=30)
mu <- link(m5.2, data = data.frame(Marriage.s=MAM.seq))
mu.PI <- apply(mu, 2, PI)
#plot
plot(Divorce ~ Marriage.s, data=d, col=rangi2)
abline(m5.1)
shade(mu.PI, MAM.seq)
MAM.seq <- seq(from=-3, to=3.5, length.out=30)
mu <- link(m5.2, data = data.frame(Marriage.s=MAM.seq))
mu.PI <- apply(mu, 2, PI)
#plot
plot(Divorce ~ Marriage.s, data=d, col=rangi2)
abline(m5.2)
shade(mu.PI, MAM.seq)
m5.1
precis(m5.1)
precis(m5.2)
m5.3 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bA * MedianAgeMarriage.s + bR * Marriage.s,
a ~ dnorm(10,10),
bA ~ dnorm(0,1),
bR ~ dnorm(0,1),
sigma ~ dunif(0,10)
), data = d
)
precis(m5.3)
plot(precis(m5.3))
precis(m5.2)
precis(m5.1)
plot(Marriage.s ~ MedianAgeMarriage.s, d, col=rangi2)
abline(m5.4)
#make the prediction model
m5.4 <- map(
alist(
Marriage.s ~ dnorm(mu, sigma),
mu <- a + b*MedianAgeMarriage.s,
a ~ dnorm(0,10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
#compute residuals by subtracting observed marraige rates in each State from the predicted rate, based upon using age at marraige:
#comput expected value at MAP, for each State
mu <- coef(m5.4)['a'] + coef(m5.4)['b']*d$MedianAgeMarriage.s
#compute residual for each State
m.resid <- d$Marriage.s - mu
plot(Marriage.s ~ MedianAgeMarriage.s, d, col=rangi2)
abline(m5.4)
#loop over states
for (i in 1:length(m.resid)) {
x <- d$MedianAgeMarriage.s[i] #location of x segment
y <- d$Marriage.s[i] #observed endpoint of line segment
#draw line segment
lines(c(x,x), c(mu[i], y), lwd = 0.5, col=col.alpha("black",0.7))
}
R.PI <- apply(R.sim, 2, PI)
#prepare new counterfactual data
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from =-3, to=3, length.out=30)
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
#compute counterfactual mean divorce (mu)
mu <- link(m5.3, data=pred.data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
#simulate conterfactual divorce outcomes
R.sim <- sim(m5.3, data=pred.data, n=1e4)
R.PI <- apply(R.sim, 2, PI)
#display predictions, hiding raw data with type="n"
plot(Divorce ~ Marriage.s, data=d, type="n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
A.avg
R.seq
head(pred.data)
?link
mu
str(my)
str(mu)
head(mu)
mu.mean
head(mu.mean)
head(mu.PI)
R.avg <- mean( d$Marriage.s)
A.seq <- seq( from=-3, to=3.5, length.out=30)
pred.data2 <- data.frame(
Marriage.s=R.avg,
MedianAgeMarriage.s=A.seq
)
mu <- link( m5.3, data=pred.data2)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( m5.3, data=pred.data2, n=1e4)
A.PI <- apply( A.sim, 2, PI)
plot( Divorce ~ MedianAgeMarriage.s, data=d, type="n")
mtext( "Marriage.s = 0")
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
head(d)
str(d)
head(d)
input_list = c("Marraige.s", "MedianAgeMarriage.s")
input_list
input_list[1]
i:length(input_list)
1:length(input_list)
i = 11
i = 1
col = input_list[i]
col
d$input_list[1]
d[,input_list[1]]
d[,input_list[1]]
input_list[1]
c = input_list[1]
d[,c]
library(dplyr)
?select
select(d, input_list[1])
d
input_list = c("MedianAgeMarriage.s", "Marriage.s")
select(d, input_list[1])
m5.3
str(m5.3)
m5.3$formula
m5.3@formula
m5.3@call
m5.3@data
m5.3@optim
m5.3@coef
m5.3@call
paste(output_var)
output_var = "Divorce"
input_list = c("MedianAgeMarriage.s", "Marriage.s")
paste(output_var)
paste(output_var, " ~ ", input_list[1])
paste(input_list[1], " = 0")
paste(input_list[1], "= 0")
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- select(data, input_list[i])
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
R.avg=A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", input_list[1]), data, type="n")
mtext( paste(input_list[1], "= 0"))
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
}
}
counterfactual_plots(d, output_var, input_list, m5.3)
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
R.avg=A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", input_list[1]), data, type="n")
mtext( paste(input_list[1], "= 0"))
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
}
}
counterfactual_plots(d, output_var, input_list, m5.3)
d
columns(d)
column(d)
names(d)
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
paste(input_list[i])=A.seq
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
paste(input_list[i]) = A.seq
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
A.seq = A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", input_list[1]), data, type="n")
mtext( paste(input_list[1], "= 0"))
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
}
}
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
A.seq = A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", input_list[1]), data, type="n")
mtext( paste(input_list[1], "= 0"))
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
}
}
counterfactual_plots(d, output_var, input_list, m5.3)
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
A.seq = A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", A.seq]), data, type="n")
#function to make counterfactual plots
counterfactual_plots <- function(data, output_var, input_list, lin_stan_model){
#loop through each input variable
for (i in 1:length(input_list)){
R.avg <- mean(select(data, input_list[i]))
A.seq <- seq( from=-3, to=3.5, length.out=30)
temp.data <- data.frame(
R.avg=R.avg,
A.seq = A.seq
)
mu <- link( lin_stan_model, data=temp.data)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
A.sim <- sim( lin_stan_model, data=temp.data, n=1e4)
A.PI <- apply( A.sim, 2, PI)
eqn = output_var +
plot( paste(output_var, "~ ", A.seq), data, type="n")
mtext( paste(input_list[1], "= 0"))
lines( A.seq, mu.mean)
shade( mu.PI, A.seq)
shade( A.PI, A.seq)
}
}
counterfactual_plots(d, output_var, input_list, m5.3)
#call link without specifiying new data
#so that it uses the original data
mu <- link(m5.3)
#summarize samples across cases
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
#simulate observations
#again, no new data, so uses original data
divorce.sim <- sim(m5.3, n=1e4)
divorce.PI <-  apply(divorce.sim, 2, PI)
plot( mu.mean ~ d$Divorce, col=rangi2, ylim=range(mu.PI), xlab="Observed divorce", ylab="Predicted divorce")
abline( a=0, b=1, lty=2) for (i in 1:nrow(d))
plot( mu.mean ~ d$Divorce, col=rangi2, ylim=range(mu.PI), xlab="Observed divorce", ylab="Predicted divorce")
abline( a=0, b=1, lty=2)
for (i in 1:nrow(d))
lines( rep(d$Divorce[i],2), c(mu.PI[1,i],mu.PI[2,i]), col=rangi2)
identify( x=d$Divorce, y=mu.mean, labels=d$Loc, cex=0.8)
plot( mu.mean ~ d$Divorce, col=rangi2, ylim=range(mu.PI), xlab="Observed divorce", ylab="Predicted divorce")
abline( a=0, b=1, lty=2)
for (i in 1:nrow(d))
lines( rep(d$Divorce[i],2), c(mu.PI[1,i],mu.PI[2,i]), col=rangi2)
identify( x=d$Divorce, y=mu.mean, labels=d$Loc, cex=0.8)
plot( mu.mean ~ d$Divorce, col=rangi2, ylim=range(mu.PI), xlab="Observed divorce", ylab="Predicted divorce")
abline( a=0, b=1, lty=2)
for (i in 1:nrow(d))
lines( rep(d$Divorce[i],2), c(mu.PI[1,i],mu.PI[2,i]), col=rangi2)
identify( x=d$Divorce, y=mu.mean, labels=d$Loc, cex=0.8)
#compute residuals
divorce.resid <- d$Divorce - mu.mean
#get ordering by divorce rate
o <- order(divorce.resid)
#make the plot
dotchart( divorce.resid[o], labels=d$Loc[o], xlim=c(-6,5), cex=0.6)
abline( v=0, col=col.alpha("black",0.2))
for (i in 1:nrow(d)) {
j <- o[i]
#which State in order
lines( d$Divorce[j]-c(mu.PI[1,j],mu.PI[2,j]), rep(i,2))
points(d$Divorce[j]-c(divorce.PI[1,j],divorce.PI[2,j]), rep(i,2), pch=3, cex=0.6, col="gray")
}
for (i in 1:nrow(d)) {
j <- o[i]
#which State in order
lines( d$Divorce[j]-c(mu.PI[1,j],mu.PI[2,j]), rep(i,2))
points(d$Divorce[j]-c(divorce.PI[1,j],divorce.PI[2,j]), rep(i,2), pch=3, cex=0.6, col="gray")
}
N <- 100
x_real <- rnorm(N)
x_spur <- rnorm(N, x_real) #x_spur as Guassian with mean = x_real
y <- rnorm(N, x_real)
d <- data.frame(y, x_real, x_spur)
pairs(d)
m <- lm(y ~ x_real + x_spur, data = d)
summary(m)
m <- lm(y ~ x_real + x_spur, data = d)
summary(m)
m <- lm(y ~ x_real, data = d)
m <- lm(y ~ x_real + x_spur, data = d)
summary(m)
m <- lm(y ~ x_real, data = d)
summary(m)
m <- lm(y ~ x_spur, data = d)
summary(m)
m <- lm(y ~ x_real, data = d)
summary(m)
m <- lm(y ~ x_real + x_spur, data = d)
summary(m)
data(milk)
d <- milk
str(milk)
m5.5 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*neocortex.perc,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = d)
data(milk)
d <- milk
str(milk)
m5.5 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*neocortex.perc,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = d)
data(milk)
d <- milk
str(milk)
dcc <- d[complete.cases(d),]
m5.5 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*neocortex.perc,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = dcc)
m5.5 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*neocortex.perc,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = dcc)
m5.5 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*neocortex.perc,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = dcc)
precis(m5.5, digits = 3)
np.seq <- 0:100
pred.data <- data.frame( neocortex.perc=np.seq)
mu <- link( m5.5, data=pred.data, n=1e4)
mu.mean <- apply( mu, 2, mean)
mu.PI <- apply( mu, 2, PI)
plot( kcal.per.g ~ neocortex.perc, data=dcc, col=rangi2)
lines( np.seq, mu.mean)
lines( np.seq, mu.PI[1,], lty=2)
lines( np.seq, mu.PI[2,], lty=2)
dcc$log.mass <- log(dcc$mass)
m5.6 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b*log.mass,
a ~ dnorm(0, 100),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
), data = dcc)
precis(m5.6, digits = 3)
